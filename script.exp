#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Aug  5 15:20:36 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./minishell
match_max 100000
expect -exact "Myshell: "
send -- "hello\r"
expect -exact "hello\r
minishell: hello: command not found\r
Myshell: "
send -- "echo hello\r"
expect -exact "echo hello\r
hello\r
Myshell: "
send -- "\[A"
expect -exact "echo hello"
send -- " | cat\r"
expect -exact " | cat\r
hello\r
Myshell: "
send -- "\[A"
expect -exact "echo hello | cat"
send -- " | (ech"
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- "baba || e"
expect -exact "\[K"
send -- "cat)\r"
expect -exact "cat)\r
minishell: baba: command not found\r
hello\r
Myshell: "
send -- "\[A"
expect -exact "echo hello | cat | (baba || cat)"
send -- " && echo love | cat > test && << LOL car"
expect -exact "\[K"
send -- "t > test2\r"
expect -exact "t > test2\r
minishell: baba: command not found\r
hello\r
> "
send -- "baba\r"
expect -exact "baba\r
> "
send -- "toto\r"
expect -exact "toto\r
> "
send -- "ds\r"
expect -exact "ds\r
> "
send -- "fdfdsaf\r"
expect -exact "fdfdsaf\r
> "
send -- "dfasdf\r"
expect -exact "dfasdf\r
> "
send -- "fgdfg\r"
expect -exact "fgdfg\r
> "
send -- "LOL\r"
expect -exact "LOL\r
Myshell: "
send -- "cat test && cat test2\r"
expect -exact "cat test && cat test2\r
love\r
baba\r
toto\r
ds\r
fdfdsaf\r
dfasdf\r
fgdfg\r
Myshell: "
send -- "rm test  test"
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- ""
expect -exact "\[K"
send -- "   test2\r"
expect -exact "   test2\r
Myshell: "
send -- "ls\r"
expect -exact "ls\r
inc  Makefile  minishell  objs	script.exp  src\r
Myshell: "
send -- "\r"
expect -exact "\r
Myshell: "
send -- "     \r"
expect -exact "     \r
Myshell: "
send -- "\"   \"\r"
expect -exact "\"   \"\r
minishell:    : command not found\r
Myshell: "
send -- "Î…"
expect -exact "\[K"
send -- "\"\"\r"
expect eof
