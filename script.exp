#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Aug  5 12:39:12 2021
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ./minishell
match_max 100000
expect -exact "Myshell: "
send -- "cat Makefile\r"
expect -exact "cat Makefile\r
NAME = minishell\r
\r
LIBFT = inc/libft/libft.a\r
\r
INC = ms_minishell.h \\\r
	  ms_define.h \\\r
	  ms_structs.h\r
\r
SRCS = ms_minishell.c \\\r
	   utils/ms_utils1.c \\\r
	   utils/ms_init.c \\\r
	   utils/ms_signals.c \\\r
	   utils/ms_clean.c \\\r
	   utils/ms_clean_cmd.c \\\r
	   utils/ms_clean_tokens.c \\\r
	   lexer/ms_lexer.c \\\r
	   lexer/ms_ctoken_op.c \\\r
	   lexer/ms_ctoken_wrd.c \\\r
	   lexer/ms_lexer_utils.c \\\r
	   lexer/ms_lexer_utils_2.c \\\r
	   expanser/ms_expanser.c \\\r
	   expanser/ms_exp_var.c \\\r
	   expanser/ms_wildcard.c \\\r
	   expanser/ms_expanser_utils.c \\\r
	   parser/ms_create_cmd.c \\\r
	   parser/ms_create_redir.c \\\r
	   parser/ms_parser.c \\\r
	   parser/ms_parser_cleaner.c \\\r
	   parser/ms_parser_env.c \\\r
	   parser/ms_parser_format.c \\\r
	   parser/ms_parser_format2.c \\\r
	   parser/ms_parser_path.c \\\r
	   parser/heredoc/ms_heredoc.c \\\r
	   parser/heredoc/ms_heredoc_expand.c \\\r
	   parser/heredoc/ms_heredoc_utils.c \\\r
	   parser/ms_parser_utils.c \\\r
	   exec/ms_exec.c \\\r
	   exec/ms_exec_child.c \\\r
	   exec/ms_exec_utils.c \\\r
	   buildins/cd/ms_cd.c \\\r
	   buildins/cd/ms_export_env.c \\\r
	   buildins/cd/ms_cd_utils.c \\\r
	   buildins/cd/ms_relative_path.c \\\r
	   buildins/cd/ms_change_path.c \\\r
	   buildins/cd/ms_get_directory.c \\\r
	   buildins/cd/ms_add_target_dir.c \\\r
	   buildins/ms_echo.c \\\r
	   buildins/ms_pwd.c \\\r
	   buildins/ms_export.c \\\r
	   buildins/ms_unset.c \\\r
	   buildins/ms_env.c \\\r
	   buildins/ms_env_utils.c \\\r
	   error/ms_check_syntax.c \\\r
	   error/ms_error.c\r
\r
#TO BE REMOVED - TEST\r
SRCS += ms_test/tester.c\r
\r
UNAME = \$(shell uname)\r
\r
ifeq (\${UNAME}, Darwin)\r
OS = 1\r
LIBINC = -lreadline -L /Users/\$(USER)/.brew/opt/readline/lib \r
IRDLINE = -I/Users/\$(USER)/.brew/opt/readline/include\r
#IRDLINE = -I/usr/local/opt/readline/include\r
#LIBINC = -lreadline -L /usr/local/opt/readline/lib \r
endif\r
\r
ifeq (\${UNAME}, Linux)\r
OS = 0\r
LIBINC = -lreadline\r
endif\r
\r
SRCDIR = src\r
OBJDIR = objs\r
INCDIR = inc\r
\r
CC = clang\r
CFLAGS = -Wall -Wextra -Werror -g\r
MEM = -fsanitize=address\r
\r
OBJS = \$(addprefix \${OBJDIR}/,\${SRCS:.c=.o})\r
\r
all: \${NAME}\r
\r
\$(LIBFT) :\r
	@make -s -C inc/libft\r
\r
\$(NAME): \${OBJS} \${LIBFT}\r
	\${CC} \${CFLAGS} \${MEM} \${OBJS} \${LIBFT} -o \$@ \${LIBINC}\r
\r
\$(OBJDIR)/%.o: \$(SRCDIR)/%.c\r
	@mkdir -p \${@D}\r
	\${CC} \${CFLAGS} \${MEM} \${IRDLINE} \${TFLAG} -I./inc -c \$< -o \$@\r
\r
test: TFLAG = -D TEST=1 -D OSX=\${OS}\r
\r
test: fclean \${NAME}\r
\r
re: fclean all\r
\r
clean:\r
	@echo  \"Cleaning objects\\c\"\r
	@rm -rf \${OBJDIR}\r
	@make clean -s -C inc/libft > /dev/null\r
	@echo \"\\033\[32m\\t\[OK\]\\033\[0m\"\r
\r
fclean: clean\r
	@echo  \"Removing minishell\\c\"\r
	@rm -rf \${NAME}\r
	@make fclean -s -C inc/libft > /dev/null\r
	@echo \"\\033\[32m\\t\[OK\]\\033\[0m\"\r
\r
.PHONY : all clean re fclean \r
Myshell: "
send -- "cd .. && ls\r"
expect -exact "cd .. && ls\r
Codingame2021  cub3D  ft_printf  ft_server  get_next_line  GIT_test  libft  minishell  Minitalk  Netwhat  philo  Piscine_2020  push_swap  push_swap_2  testers\r
Myshell: "
send -- "exit\r"
expect eof
